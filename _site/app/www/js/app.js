// Generated by CoffeeScript 1.4.0

/*
Resets, fixes 'n' shit
*/


(function() {
  var $alarmTime, $cancelButton, $submitButton, alarmComplete, alarmDismiss, alarmHasBeenCalled, alarmIsSet, audioIncrement, cancelDeepSleepCountdown, checkAlarmAgainstTime, countdownToDeepSleep, duration, injectThoughts, interruptDeepSleepCountdown, startMonitoringMovement, stopMonitoringMovement, toggleAlarm;

  window.addEventListener("load", function() {
    return new FastClick(document.body);
  }, false);

  $("input").blur(function() {
    return window.scrollTo(0, 0);
  });

  /*
  UI Elements
  */


  alarmIsSet = false;

  alarmHasBeenCalled = false;

  $alarmTime = $("#alarm-time");

  $submitButton = $("#alarm-submit");

  $cancelButton = $("#alarm-cancel");

  duration = 1800000;

  audioIncrement = 0;

  /*
  Bind events
  */


  $submitButton.bind("click", function() {
    toggleAlarm();
    countdownToDeepSleep();
    return startMonitoringMovement();
  });

  $cancelButton.bind("click", function() {
    toggleAlarm();
    return stopMonitoringMovement(window.accelerometerMonitor);
  });

  /*
  Alarm Clock logic
  */


  toggleAlarm = function() {
    var alarmTime, hour, mins, splitAlarmTime;
    alarmTime = $alarmTime.val();
    splitAlarmTime = alarmTime.split(":");
    hour = parseInt(splitAlarmTime[0]);
    mins = parseInt(splitAlarmTime[1]);
    if (!alarmIsSet) {
      alarmIsSet = true;
      $(".main").fadeOut(1000, function() {
        return $(".night-mode").fadeIn(1000);
      });
      window.ticker = setInterval(function() {
        return checkAlarmAgainstTime(hour, mins);
      }, 1000);
      return console.log("Alarm is set for " + hour + ":" + mins);
    } else {
      alarmIsSet = false;
      $(".night-mode").fadeOut(1000, function() {
        return $(".main").fadeIn(1000);
      });
      clearInterval(window.ticker);
      cancelDeepSleepCountdown();
      clearInterval(window.audioPlayer);
      if (typeof window.alarmTone !== "undefined") {
        window.alarmTone.stop();
      }
      console.log("Alarm cancelled");
      return alarmHasBeenCalled = false;
    }
  };

  checkAlarmAgainstTime = function(hour, minutes) {
    var currentHour, currentMins, date;
    date = new Date;
    currentHour = date.getHours();
    currentMins = date.getMinutes();
    if (hour === currentHour && minutes === currentMins) {
      if (!alarmHasBeenCalled) {
        alarmComplete();
        alarmHasBeenCalled = true;
        return console.log("Alarm has been called?: " + alarmHasBeenCalled);
      }
    } else {
      console.log("tick");
      return console.log("Alarm status: " + alarmHasBeenCalled);
    }
  };

  alarmComplete = function() {
    navigator.notification.vibrate(1000);
    window.alarmTone = new Media("../www/audio/alarm_loop.wav");
    window.alarmTone.play();
    return navigator.notification.alert("It's time to wake up, participant", toggleAlarm, "Lucid", "OK");
  };

  alarmDismiss = function() {
    return console.log("Alarm dismissed");
  };

  /*
  Audio player
  */


  injectThoughts = function() {
    var audioClips, cycleDuration, i;
    audioClips = ["../www/audio/clue_triangle_a.mp3", "../www/audio/clue_triangle_b.mp3", "../www/audio/clue_descriptive.mp3", "../www/audio/musical_complete.mp3", "../www/audio/musical_bass.mp3", "../www/audio/musical_drums.mp3", "../www/audio/musical_guitar.mp3", "../www/audio/musical_organ.mp3"];
    cycleDuration = 600000;
    i = 0;
    return window.audioPlayer = setInterval(function() {
      if (i < audioClips.length) {
        window.clip = new Media(audioClips[i]);
        window.clip.play();
        return i++;
      }
    }, cycleDuration);
  };

  /*
  REM Sleep detection
  */


  countdownToDeepSleep = function() {
    return window.countdown = setInterval(function() {
      duration = duration - 1000;
      console.log(duration);
      if (duration === 0) {
        cancelDeepSleepCountdown();
        console.log("We're ready to send audio");
        return injectThoughts();
      }
    }, 1000);
  };

  cancelDeepSleepCountdown = function() {
    clearInterval(window.countdown);
    return duration = 1800000;
  };

  interruptDeepSleepCountdown = function() {
    clearInterval(window.countdown);
    duration = 1800000;
    clearInterval(window.audioPlayer);
    if (typeof window.clip !== "undefined") {
      window.clip.stop();
    }
    return countdownToDeepSleep();
  };

  /*
  Watch for movement
  */


  startMonitoringMovement = function() {
    var accelerometerError, accelerometerOptions, accelerometerSuccess;
    accelerometerSuccess = function(acceleration) {
      if (acceleration.x > 1 || acceleration.x < -1 || acceleration.y > 1 || acceleration.y < -1) {
        console.log("movement!");
        return interruptDeepSleepCountdown();
      }
    };
    accelerometerError = function() {
      return alert("Error watching accelerometer");
    };
    accelerometerOptions = {
      frequency: 100
    };
    return window.accelerometerMonitor = navigator.accelerometer.watchAcceleration(accelerometerSuccess, accelerometerError, accelerometerOptions);
  };

  stopMonitoringMovement = function(monitorID) {
    return navigator.accelerometer.clearWatch(monitorID);
  };

}).call(this);
